{"ast":null,"code":"import { makeAutoObservable } from 'mobx';\nimport { history, http, setToken, getToken, removeToken } from '@/utils';\nclass ApiStore {\n  // 修改此行以检查本地存储中的模型值\n\n  constructor() {\n    this.apiKey = getToken() || '';\n    this.selectedModel = localStorage.getItem('selectedModel') || 'gpt-3.5-turbo';\n    // 设置API密钥并保存到localStorage\n    this.setApiKey = apiKey => {\n      console.log(apiKey);\n      this.apiKey = apiKey;\n      setToken(apiKey);\n    };\n    // 获取当前设置的API密钥（如果已设置）\n    this.getApiKey = () => {\n      return this.apiKey;\n    };\n    // 注销并删除API密钥\n    this.removeApiKey = () => {\n      this.apiKey = '';\n      removeToken();\n      history.push('/login');\n    };\n    // 测试API Key是否有效，并接受一个可选的模型名称参数\n    this.validateApiKeyWithModel = async function (apiKey) {\n      let modelName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'text-davinci-003';\n      try {\n        const response = await fetch(`https://api.openai.com/v1/engines/${modelName}/completions`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${apiKey}`\n          },\n          body: JSON.stringify({\n            prompt: '测试 API Key...',\n            max_tokens: 5\n          })\n        });\n        return response.status === 200;\n      } catch (error) {\n        console.error(error);\n        return false;\n      }\n    };\n    // 设置选定的模型 - 添加此新方法\n    this.setSelectedModel = model => {\n      this.selectedModel = model;\n      localStorage.setItem('selectedModel', model); // 保存模型到本地存储\n    };\n    // 获取选定的模型\n    this.getSelectedModel = () => {\n      return this.selectedModel;\n    };\n    makeAutoObservable(this);\n  }\n}\nexport default ApiStore;","map":{"version":3,"names":["makeAutoObservable","history","http","setToken","getToken","removeToken","ApiStore","constructor","apiKey","selectedModel","localStorage","getItem","setApiKey","console","log","getApiKey","removeApiKey","push","validateApiKeyWithModel","modelName","arguments","length","undefined","response","fetch","method","headers","body","JSON","stringify","prompt","max_tokens","status","error","setSelectedModel","model","setItem","getSelectedModel"],"sources":["C:/Users/94272/Desktop/Job/my-personal_website/beattather/src/store/api.Store.js"],"sourcesContent":["import { makeAutoObservable } from 'mobx';\r\nimport { history, http, setToken, getToken, removeToken } from '@/utils';\r\n\r\nclass ApiStore {\r\n  apiKey = getToken() || '';\r\n  selectedModel = localStorage.getItem('selectedModel') || 'gpt-3.5-turbo'; // 修改此行以检查本地存储中的模型值\r\n\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  // 设置API密钥并保存到localStorage\r\n  setApiKey = ( apiKey ) => {\r\n    console.log(apiKey);\r\n    this.apiKey = apiKey;\r\n    setToken(apiKey);\r\n  };\r\n\r\n  // 获取当前设置的API密钥（如果已设置）\r\n  getApiKey = () => {\r\n    return this.apiKey;\r\n  };\r\n\r\n  // 注销并删除API密钥\r\n  removeApiKey = () => {\r\n    this.apiKey = '';\r\n    removeToken();\r\n    history.push('/login');\r\n  };\r\n\r\n  // 测试API Key是否有效，并接受一个可选的模型名称参数\r\n    validateApiKeyWithModel = async (apiKey, modelName = 'text-davinci-003') => {\r\n    try {\r\n      const response = await fetch(`https://api.openai.com/v1/engines/${modelName}/completions`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${apiKey}`,\r\n        },\r\n        body: JSON.stringify({\r\n          prompt: '测试 API Key...',\r\n          max_tokens: 5,\r\n        }),\r\n      });\r\n  \r\n      return response.status === 200;\r\n    } catch (error) {\r\n      console.error(error);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  // 设置选定的模型 - 添加此新方法\r\n  setSelectedModel = (model) => {\r\n    this.selectedModel = model;\r\n    localStorage.setItem('selectedModel', model); // 保存模型到本地存储\r\n  };\r\n\r\n  // 获取选定的模型\r\n  getSelectedModel = () => {\r\n    return this.selectedModel;\r\n  };\r\n}\r\n\r\nexport default ApiStore;\r\n"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,MAAM;AACzC,SAASC,OAAO,EAAEC,IAAI,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,SAAS;AAExE,MAAMC,QAAQ,CAAC;EAE6D;;EAE1EC,WAAWA,CAAA,EAAG;IAAA,KAHdC,MAAM,GAAGJ,QAAQ,EAAE,IAAI,EAAE;IAAA,KACzBK,aAAa,GAAGC,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC,IAAI,eAAe;IAMxE;IAAA,KACAC,SAAS,GAAKJ,MAAM,IAAM;MACxBK,OAAO,CAACC,GAAG,CAACN,MAAM,CAAC;MACnB,IAAI,CAACA,MAAM,GAAGA,MAAM;MACpBL,QAAQ,CAACK,MAAM,CAAC;IAClB,CAAC;IAED;IAAA,KACAO,SAAS,GAAG,MAAM;MAChB,OAAO,IAAI,CAACP,MAAM;IACpB,CAAC;IAED;IAAA,KACAQ,YAAY,GAAG,MAAM;MACnB,IAAI,CAACR,MAAM,GAAG,EAAE;MAChBH,WAAW,EAAE;MACbJ,OAAO,CAACgB,IAAI,CAAC,QAAQ,CAAC;IACxB,CAAC;IAED;IAAA,KACEC,uBAAuB,GAAG,gBAAOV,MAAM,EAAqC;MAAA,IAAnCW,SAAS,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,kBAAkB;MACvE,IAAI;QACF,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAE,qCAAoCL,SAAU,cAAa,EAAE;UACzFM,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE,kBAAkB;YAClC,eAAe,EAAG,UAASlB,MAAO;UACpC,CAAC;UACDmB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YACnBC,MAAM,EAAE,eAAe;YACvBC,UAAU,EAAE;UACd,CAAC;QACH,CAAC,CAAC;QAEF,OAAOR,QAAQ,CAACS,MAAM,KAAK,GAAG;MAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdpB,OAAO,CAACoB,KAAK,CAACA,KAAK,CAAC;QACpB,OAAO,KAAK;MACd;IACF,CAAC;IAED;IAAA,KACAC,gBAAgB,GAAIC,KAAK,IAAK;MAC5B,IAAI,CAAC1B,aAAa,GAAG0B,KAAK;MAC1BzB,YAAY,CAAC0B,OAAO,CAAC,eAAe,EAAED,KAAK,CAAC,CAAC,CAAC;IAChD,CAAC;IAED;IAAA,KACAE,gBAAgB,GAAG,MAAM;MACvB,OAAO,IAAI,CAAC5B,aAAa;IAC3B,CAAC;IArDCT,kBAAkB,CAAC,IAAI,CAAC;EAC1B;AAqDF;AAEA,eAAeM,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}