{"ast":null,"code":"import { useStore } from '@/store';\nconst {\n  apiStore\n} = useStore();\nexport const validateApiKeyWithModel = async function () {\n  let apiKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : apiStore.apiKey;\n  let modelName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"text-davinci-003\";\n  try {\n    const response = await fetch(`https://api.openai.com/v1/engines/${modelName}/completions`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${apiKey}`\n      },\n      body: JSON.stringify({\n        prompt: \"测试 API Key...\",\n        max_tokens: 5\n      })\n    });\n    return response.status === 200;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n};\nexport const callGPT = async function (apiKey) {\n  let prompt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"test\";\n  let model = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"gpt-4\";\n  let maxTokens = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  try {\n    const response = await fetch(`https://api.openai.com/v1/chat/completions`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${apiKey}`\n      },\n      body: JSON.stringify({\n        model: model,\n        // 添加模型参数\n        messages: [{\n          role: \"user\",\n          content: prompt\n        }],\n        max_tokens: maxTokens\n      })\n    });\n    if (response.status === 200) {\n      return true;\n    } else {\n      throw new Error(`Error: ${response.status} ${response.statusText}`);\n    }\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n};","map":{"version":3,"names":["useStore","apiStore","validateApiKeyWithModel","apiKey","arguments","length","undefined","modelName","response","fetch","method","headers","Authorization","body","JSON","stringify","prompt","max_tokens","status","error","console","callGPT","model","maxTokens","messages","role","content","Error","statusText"],"sources":["C:/Users/94272/Desktop/Job/my-personal_website/beattather/src/utils/callModel.js"],"sourcesContent":["import { useStore } from '@/store';\r\nconst { apiStore } = useStore();\r\n\r\nexport const validateApiKeyWithModel = async (apiKey = apiStore.apiKey, modelName = \"text-davinci-003\") => {\r\n  try {\r\n    const response = await fetch(`https://api.openai.com/v1/engines/${modelName}/completions`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${apiKey}`,\r\n      },\r\n      body: JSON.stringify({\r\n        prompt: \"测试 API Key...\",\r\n        max_tokens: 5,\r\n      }),\r\n    });\r\n\r\n    return response.status === 200;\r\n  } catch (error) {\r\n    console.error(error);\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const callGPT = async (apiKey, prompt = \"test\", model = \"gpt-4\", maxTokens = 1) => {\r\n  try {\r\n    const response = await fetch(`https://api.openai.com/v1/chat/completions`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${apiKey}`,\r\n      },\r\n      body: JSON.stringify({\r\n        model: model, // 添加模型参数\r\n        messages: [\r\n          { role: \"user\", content: prompt },\r\n        ],\r\n        max_tokens: maxTokens,\r\n      }),\r\n    });\r\n\r\n    if (response.status === 200) {\r\n      return true;\r\n    } else {\r\n      throw new Error(`Error: ${response.status} ${response.statusText}`);\r\n    }\r\n  } catch (error) {\r\n    console.error(error);\r\n    return false;\r\n  }\r\n};\r\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,SAAS;AAClC,MAAM;EAAEC;AAAS,CAAC,GAAGD,QAAQ,EAAE;AAE/B,OAAO,MAAME,uBAAuB,GAAG,eAAAA,CAAA,EAAoE;EAAA,IAA7DC,MAAM,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGH,QAAQ,CAACE,MAAM;EAAA,IAAEI,SAAS,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,kBAAkB;EACpG,IAAI;IACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAE,qCAAoCF,SAAU,cAAa,EAAE;MACzFG,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCC,aAAa,EAAG,UAAST,MAAO;MAClC,CAAC;MACDU,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,MAAM,EAAE,eAAe;QACvBC,UAAU,EAAE;MACd,CAAC;IACH,CAAC,CAAC;IAEF,OAAOT,QAAQ,CAACU,MAAM,KAAK,GAAG;EAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACpB,OAAO,KAAK;EACd;AACF,CAAC;AAED,OAAO,MAAME,OAAO,GAAG,eAAAA,CAAOlB,MAAM,EAAsD;EAAA,IAApDa,MAAM,GAAAZ,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,MAAM;EAAA,IAAEkB,KAAK,GAAAlB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,OAAO;EAAA,IAAEmB,SAAS,GAAAnB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;EACnF,IAAI;IACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAE,4CAA2C,EAAE;MACzEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCC,aAAa,EAAG,UAAST,MAAO;MAClC,CAAC;MACDU,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBO,KAAK,EAAEA,KAAK;QAAE;QACdE,QAAQ,EAAE,CACR;UAAEC,IAAI,EAAE,MAAM;UAAEC,OAAO,EAAEV;QAAO,CAAC,CAClC;QACDC,UAAU,EAAEM;MACd,CAAC;IACH,CAAC,CAAC;IAEF,IAAIf,QAAQ,CAACU,MAAM,KAAK,GAAG,EAAE;MAC3B,OAAO,IAAI;IACb,CAAC,MAAM;MACL,MAAM,IAAIS,KAAK,CAAE,UAASnB,QAAQ,CAACU,MAAO,IAAGV,QAAQ,CAACoB,UAAW,EAAC,CAAC;IACrE;EACF,CAAC,CAAC,OAAOT,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACpB,OAAO,KAAK;EACd;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}