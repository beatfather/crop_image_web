{"ast":null,"code":"import { makeAutoObservable } from 'mobx';\nimport { history, setToken, getToken, removeToken } from '@/utils';\nimport * as openai from 'openai'; // 导入openai库\nimport { tokenCounter } from '../utils';\nclass ApiStore {\n  constructor() {\n    var _this = this;\n    this.apiKey = getToken() || '';\n    this.selectedModel = localStorage.getItem('selectedModel') || 'gpt-3.5-turbo';\n    this.setApiKey = apiKey => {\n      console.log(apiKey);\n      this.apiKey = apiKey;\n      setToken(apiKey);\n    };\n    this.getApiKey = () => {\n      return this.apiKey;\n    };\n    this.removeApiKey = () => {\n      this.apiKey = '';\n      removeToken();\n      history.push('/login');\n    };\n    this.setSelectedModel = model => {\n      this.selectedModel = model;\n      localStorage.setItem('selectedModel', model);\n    };\n    this.getSelectedModel = () => {\n      return this.selectedModel;\n    };\n    this.callEngines = async function () {\n      let prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"test\";\n      let model = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"text-davinci-003\";\n      let updateCallback = arguments.length > 2 ? arguments[2] : undefined;\n      const maxTokens = prompt !== \"test\" ? 3700 - tokenCounter(prompt) : 1;\n      const endpoint = `https://api.openai.com/v1/engines/${model}/completions`;\n      return await _this.streamRequest(endpoint, prompt, model, maxTokens, updateCallback);\n    };\n    this.streamRequest = async (endpoint, prompt, model, maxTokens, updateCallback) => {\n      try {\n        const response = await fetch(endpoint, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${this.apiKey}`\n          },\n          body: JSON.stringify({\n            model: model,\n            prompt: prompt,\n            max_tokens: maxTokens,\n            temperature: 0.5,\n            stream: true\n          })\n        });\n        if (response.status === 200) {\n          const reader = response.body.getReader();\n          let result = \"\";\n          const processStream = async () => {\n            // ... (省略了处理流的具体实现)\n          };\n          const finalResult = await processStream();\n          return prompt === \"test\" ? true : finalResult;\n        } else {\n          throw new Error(`Error: ${response.status} ${response.statusText}`);\n        }\n      } catch (error) {\n        console.error(error);\n        return false;\n      }\n    };\n    this.callGPT = async function () {\n      let prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'test';\n      let model = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"gpt-4\";\n      try {\n        let maxTokens;\n        if (prompt === 'test') {\n          maxTokens = 5;\n        } else if (model === \"gpt-4\") {\n          maxTokens = 7700 - tokenCounter(prompt);\n        } else {\n          maxTokens = 3700 - tokenCounter(prompt);\n        }\n        const response = await fetch(`https://api.openai.com/v1/chat/completions`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${_this.apiKey}`\n          },\n          body: JSON.stringify({\n            model: model,\n            messages: [{\n              role: \"user\",\n              content: prompt\n            }],\n            max_tokens: maxTokens,\n            temperature: 0.5,\n            stream: true\n          })\n        });\n        console.log(response);\n        if (response.status === 200) {\n          const responseData = await response.json();\n          console.log(responseData);\n          return prompt === 'test' ? true : responseData.choices[0].message.content;\n        } else {\n          throw new Error(`Error: ${response.status} ${response.statusText}`);\n        }\n      } catch (error) {\n        console.error(error);\n        return false;\n      }\n    };\n    this.callModel = async (prompt, model, updateCallback) => {\n      console.log(\"updateCallback\", updateCallback);\n      if (model === 'gpt-3.5-turbo' || model === 'gpt-4') {\n        return await this.callGPT(prompt, model, updateCallback);\n      } else {\n        return await this.callEngines(prompt, model, updateCallback);\n      }\n    };\n    makeAutoObservable(this);\n  }\n}\nexport default ApiStore;","map":{"version":3,"names":["makeAutoObservable","history","setToken","getToken","removeToken","openai","tokenCounter","ApiStore","constructor","_this","apiKey","selectedModel","localStorage","getItem","setApiKey","console","log","getApiKey","removeApiKey","push","setSelectedModel","model","setItem","getSelectedModel","callEngines","prompt","arguments","length","undefined","updateCallback","maxTokens","endpoint","streamRequest","response","fetch","method","headers","Authorization","body","JSON","stringify","max_tokens","temperature","stream","status","reader","getReader","result","processStream","finalResult","Error","statusText","error","callGPT","messages","role","content","responseData","json","choices","message","callModel"],"sources":["C:/Users/94272/Desktop/Job/my-personal_website/beattather/src/store/api.Store.js"],"sourcesContent":["import { makeAutoObservable } from 'mobx';\r\nimport { history, setToken, getToken, removeToken } from '@/utils';\r\nimport * as openai from 'openai'; // 导入openai库\r\nimport { tokenCounter } from '../utils';\r\nclass ApiStore {\r\n  apiKey = getToken() || '';\r\n  selectedModel = localStorage.getItem('selectedModel') || 'gpt-3.5-turbo';\r\n\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  setApiKey = (apiKey) => {\r\n    console.log(apiKey);\r\n    this.apiKey = apiKey;\r\n    setToken(apiKey);\r\n  };\r\n\r\n  getApiKey = () => {\r\n    return this.apiKey;\r\n  };\r\n\r\n  removeApiKey = () => {\r\n    this.apiKey = '';\r\n    removeToken();\r\n    history.push('/login');\r\n  };\r\n\r\n  setSelectedModel = (model) => {\r\n    this.selectedModel = model;\r\n    localStorage.setItem('selectedModel', model);\r\n  };\r\n\r\n  getSelectedModel = () => {\r\n    return this.selectedModel;\r\n  };\r\n\r\n  callEngines = async (prompt = \"test\", model = \"text-davinci-003\", updateCallback) => {\r\n    const maxTokens = prompt !== \"test\" ? 3700 - tokenCounter(prompt) : 1;\r\n    const endpoint = `https://api.openai.com/v1/engines/${model}/completions`;\r\n    \r\n    return await this.streamRequest(endpoint, prompt, model, maxTokens, updateCallback);\r\n  };\r\n  streamRequest = async (endpoint, prompt, model, maxTokens, updateCallback) => {\r\n    try {\r\n      const response = await fetch(endpoint, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${this.apiKey}`,\r\n        },\r\n        body: JSON.stringify({\r\n          model: model,\r\n          prompt: prompt,\r\n          max_tokens: maxTokens,\r\n          temperature: 0.5,\r\n          stream: true,\r\n        }),\r\n      });\r\n  \r\n      if (response.status === 200) {\r\n        const reader = response.body.getReader();\r\n        let result = \"\";\r\n  \r\n        const processStream = async () => {\r\n          // ... (省略了处理流的具体实现)\r\n        };\r\n  \r\n        const finalResult = await processStream();\r\n        return prompt === \"test\" ? true : finalResult;\r\n      } else {\r\n        throw new Error(`Error: ${response.status} ${response.statusText}`);\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  \r\n  \r\n\r\n  callGPT = async (prompt = 'test', model = \"gpt-4\") => {\r\n    try {\r\n      let maxTokens;\r\n      if (prompt === 'test') {\r\n        maxTokens = 5;\r\n      } else if (model === \"gpt-4\") {\r\n        maxTokens = 7700 - tokenCounter(prompt);\r\n      } else {\r\n        maxTokens = 3700 - tokenCounter(prompt);\r\n      }\r\n  \r\n      const response = await fetch(`https://api.openai.com/v1/chat/completions`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${this.apiKey}`,\r\n        },\r\n        body: JSON.stringify({\r\n          model: model,\r\n          messages: [{ role: \"user\", content: prompt }],\r\n          max_tokens: maxTokens,\r\n          temperature: 0.5,\r\n          stream: true\r\n        }),\r\n      });\r\n      console.log(response);\r\n      if (response.status === 200) {\r\n        const responseData = await response.json();\r\n        console.log(responseData);\r\n        return prompt === 'test' ? true : responseData.choices[0].message.content;\r\n      } else {\r\n        throw new Error(`Error: ${response.status} ${response.statusText}`);\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n\r\n  callModel = async (prompt, model, updateCallback) => {\r\n    console.log(\"updateCallback\",updateCallback);\r\n    if (model === 'gpt-3.5-turbo' || model === 'gpt-4') {\r\n      return await this.callGPT(prompt, model, updateCallback);\r\n    } else {\r\n      return await this.callEngines(prompt, model, updateCallback);\r\n    }\r\n  };\r\n  \r\n}\r\n\r\nexport default ApiStore;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}