{"ast":null,"code":"import { makeAutoObservable } from 'mobx';\nimport { history, setToken, getToken, removeToken } from '@/utils';\nimport * as openai from 'openai'; // 导入openai库\nimport { tokenCounter } from '../utils';\nclass ApiStore {\n  constructor() {\n    var _this = this;\n    this.apiKey = getToken() || '';\n    this.selectedModel = localStorage.getItem('selectedModel') || 'gpt-3.5-turbo';\n    this.setApiKey = apiKey => {\n      console.log(apiKey);\n      this.apiKey = apiKey;\n      setToken(apiKey);\n    };\n    this.getApiKey = () => {\n      return this.apiKey;\n    };\n    this.removeApiKey = () => {\n      this.apiKey = '';\n      removeToken();\n      history.push('/login');\n    };\n    this.setSelectedModel = model => {\n      this.selectedModel = model;\n      localStorage.setItem('selectedModel', model);\n    };\n    this.getSelectedModel = () => {\n      return this.selectedModel;\n    };\n    this.processStream = async (reader, result) => {\n      const {\n        value: chunk,\n        done: readerDone\n      } = await reader.read();\n      const decodedChunk = new TextDecoder(\"utf-8\").decode(chunk);\n      result += decodedChunk;\n      if (readerDone) {\n        return result;\n      }\n      return this.processStream(reader, result);\n    };\n    this.callEngines = async function () {\n      let prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"test\";\n      let model = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"text-davinci-003\";\n      const data = JSON.stringify({\n        model,\n        prompt,\n        max_tokens: 1024,\n        n: 1,\n        stop: [\"\\n\"],\n        temperature: 0.5,\n        stream: true\n      });\n      const requestOptions = {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: data\n      };\n      const response = await fetch(\"https://api.openai.com/v1/engines/davinci-codex/completions\", requestOptions);\n      console.log(\"here\");\n      if (response.status === 200) {\n        const reader = response.body.getReader();\n        let result = \"\";\n        const finalResult = await _this.processStream(reader, result);\n        console.log('finalResult', finalResult);\n        return finalResult;\n      } else {\n        throw new Error(`API request failed with status code ${response.status}`);\n      }\n    };\n    this.callGPT = async function () {\n      let prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'test';\n      let model = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"gpt-4\";\n      try {\n        let maxTokens;\n        if (prompt === 'test') {\n          maxTokens = 5;\n        } else if (model === \"gpt-4\") {\n          maxTokens = 7700 - tokenCounter(prompt);\n        } else {\n          maxTokens = 3700 - tokenCounter(prompt);\n        }\n        const response = await fetch(`https://api.openai.com/v1/chat/completions`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${_this.apiKey}`\n          },\n          body: JSON.stringify({\n            model: model,\n            messages: [{\n              role: \"user\",\n              content: prompt\n            }],\n            max_tokens: maxTokens,\n            temperature: 0.5,\n            stream: true\n          })\n        });\n        console.log(response);\n        if (response.status === 200) {\n          const responseData = await response.json();\n          console.log(responseData);\n          return prompt === 'test' ? true : responseData.choices[0].message.content;\n        } else {\n          throw new Error(`Error: ${response.status} ${response.statusText}`);\n        }\n      } catch (error) {\n        console.error(error);\n        return false;\n      }\n    };\n    this.callModel = async (prompt, model) => {\n      if (model === 'gpt-3.5-turbo' || model === 'gpt-4') {\n        return await this.callGPT(prompt, model);\n      } else {\n        return await this.callEngines(prompt, model);\n      }\n    };\n    makeAutoObservable(this);\n  }\n}\nexport default ApiStore;","map":{"version":3,"names":["makeAutoObservable","history","setToken","getToken","removeToken","openai","tokenCounter","ApiStore","constructor","_this","apiKey","selectedModel","localStorage","getItem","setApiKey","console","log","getApiKey","removeApiKey","push","setSelectedModel","model","setItem","getSelectedModel","processStream","reader","result","value","chunk","done","readerDone","read","decodedChunk","TextDecoder","decode","callEngines","prompt","arguments","length","undefined","data","JSON","stringify","max_tokens","n","stop","temperature","stream","requestOptions","method","headers","body","response","fetch","status","getReader","finalResult","Error","callGPT","maxTokens","messages","role","content","responseData","json","choices","message","statusText","error","callModel"],"sources":["C:/Users/94272/Desktop/Job/my-personal_website/beattather/src/store/api.Store.js"],"sourcesContent":["import { makeAutoObservable } from 'mobx';\r\nimport { history, setToken, getToken, removeToken } from '@/utils';\r\nimport * as openai from 'openai'; // 导入openai库\r\nimport { tokenCounter } from '../utils';\r\nclass ApiStore {\r\n  apiKey = getToken() || '';\r\n  selectedModel = localStorage.getItem('selectedModel') || 'gpt-3.5-turbo';\r\n\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  setApiKey = (apiKey) => {\r\n    console.log(apiKey);\r\n    this.apiKey = apiKey;\r\n    setToken(apiKey);\r\n  };\r\n\r\n  getApiKey = () => {\r\n    return this.apiKey;\r\n  };\r\n\r\n  removeApiKey = () => {\r\n    this.apiKey = '';\r\n    removeToken();\r\n    history.push('/login');\r\n  };\r\n\r\n  setSelectedModel = (model) => {\r\n    this.selectedModel = model;\r\n    localStorage.setItem('selectedModel', model);\r\n  };\r\n\r\n  getSelectedModel = () => {\r\n    return this.selectedModel;\r\n  };\r\n\r\n  processStream = async (reader, result) => {\r\n    const { value: chunk, done: readerDone } = await reader.read();\r\n    const decodedChunk = new TextDecoder(\"utf-8\").decode(chunk);\r\n    result += decodedChunk;\r\n\r\n    if (readerDone) {\r\n      return result;\r\n    }\r\n\r\n    return this.processStream(reader, result);\r\n  };\r\n\r\n  callEngines = async (prompt = \"test\", model = \"text-davinci-003\") => {\r\n    const data = JSON.stringify({\r\n      model,\r\n      prompt,\r\n      max_tokens: 1024,\r\n      n: 1,\r\n      stop: [\"\\n\"],\r\n      temperature: 0.5,\r\n      stream: true,\r\n    });\r\n\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: data,\r\n    };\r\n\r\n    const response = await fetch(\r\n      \"https://api.openai.com/v1/engines/davinci-codex/completions\",\r\n      requestOptions\r\n    );\r\n    console.log(\"here\");\r\n    if (response.status === 200) {\r\n      const reader = response.body.getReader();\r\n      let result = \"\";\r\n\r\n      const finalResult = await this.processStream(reader, result);\r\n\r\n      console.log('finalResult',finalResult);\r\n      return finalResult;\r\n    } else {\r\n      throw new Error(`API request failed with status code ${response.status}`);\r\n    }\r\n  };\r\n  \r\n  \r\n\r\n  callGPT = async (prompt = 'test', model = \"gpt-4\") => {\r\n    try {\r\n      let maxTokens;\r\n      if (prompt === 'test') {\r\n        maxTokens = 5;\r\n      } else if (model === \"gpt-4\") {\r\n        maxTokens = 7700 - tokenCounter(prompt);\r\n      } else {\r\n        maxTokens = 3700 - tokenCounter(prompt);\r\n      }\r\n  \r\n      const response = await fetch(`https://api.openai.com/v1/chat/completions`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${this.apiKey}`,\r\n        },\r\n        body: JSON.stringify({\r\n          model: model,\r\n          messages: [{ role: \"user\", content: prompt }],\r\n          max_tokens: maxTokens,\r\n          temperature: 0.5,\r\n          stream: true\r\n        }),\r\n      });\r\n      console.log(response);\r\n      if (response.status === 200) {\r\n        const responseData = await response.json();\r\n        console.log(responseData);\r\n        return prompt === 'test' ? true : responseData.choices[0].message.content;\r\n      } else {\r\n        throw new Error(`Error: ${response.status} ${response.statusText}`);\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n\r\n  callModel = async (prompt , model ) => {\r\n    if (model === 'gpt-3.5-turbo' || model === 'gpt-4') {\r\n      return await this.callGPT(prompt, model);\r\n    } else {\r\n      return await this.callEngines(prompt, model);\r\n    }\r\n  };\r\n\r\n  \r\n}\r\n\r\nexport default ApiStore;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}