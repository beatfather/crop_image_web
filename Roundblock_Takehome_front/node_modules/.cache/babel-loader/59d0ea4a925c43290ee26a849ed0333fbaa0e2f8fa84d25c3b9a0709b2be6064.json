{"ast":null,"code":"import { makeAutoObservable } from 'mobx';\nimport { history, setToken, getToken, removeToken } from '@/utils';\nimport * as openai from 'openai'; // 导入openai库\nimport { tokenCounter } from '../utils';\nimport { createParser } from './openai_stream_parser'; // 导入事件流解析器\n\nclass ApiStore {\n  constructor() {\n    var _this = this;\n    this.apiKey = getToken() || '';\n    this.selectedModel = localStorage.getItem('selectedModel') || 'gpt-3.5-turbo';\n    this.setApiKey = apiKey => {\n      console.log(apiKey);\n      this.apiKey = apiKey;\n      setToken(apiKey);\n    };\n    this.getApiKey = () => {\n      return this.apiKey;\n    };\n    this.removeApiKey = () => {\n      this.apiKey = '';\n      removeToken();\n      history.push('/login');\n    };\n    this.setSelectedModel = model => {\n      this.selectedModel = model;\n      localStorage.setItem('selectedModel', model);\n    };\n    this.getSelectedModel = () => {\n      return this.selectedModel;\n    };\n    this.callEngines = async function () {\n      let prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"test\";\n      let model = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'text-davinci-003';\n      let maxTokens = prompt !== 'test' ? 3700 - tokenCounter(prompt) : 1;\n      try {\n        const response = await fetch(`https://api.openai.com/v1/engines/${model}/completions`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${_this.apiKey}`\n          },\n          body: JSON.stringify({\n            prompt: prompt,\n            max_tokens: maxTokens\n          })\n        });\n        if (response.status === 200) {\n          const data = await response.json();\n          // 返回测试用例结果或实际完成内容\n          return prompt === 'test' ? true : data.choices[0].text;\n        } else {\n          throw new Error(`Error: ${response.status} ${response.statusText}`);\n        }\n      } catch (error) {\n        console.error(error);\n        return false;\n      }\n    };\n    this.callGPT = async function () {\n      let prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'test';\n      let model = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"gpt-4\";\n      try {\n        let maxTokens;\n        if (prompt === 'test') {\n          maxTokens = 5;\n        } else if (model === \"gpt-4\") {\n          maxTokens = 7700 - tokenCounter(prompt);\n        } else {\n          maxTokens = 3700 - tokenCounter(prompt);\n        }\n        const response = await fetch(`https://api.openai.com/v1/chat/completions`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${_this.apiKey}`\n          },\n          body: JSON.stringify({\n            model: model,\n            messages: [{\n              role: \"user\",\n              content: prompt\n            }],\n            max_tokens: maxTokens,\n            temperature: 0.5,\n            stream: true\n          })\n        });\n        if (response.status === 200) {\n          let textOutput = '';\n          const onParse = event => {\n            if (event.type === 'end_of_text') {\n              controller.close();\n            } else if (event.type === 'text') {\n              textOutput += event.data;\n            }\n          };\n          const parser = createParser(onParse);\n          const {\n            readable,\n            writable\n          } = new TransformStream();\n          const writer = writable.getWriter();\n          reader.read().then(async function process(_ref) {\n            let {\n              done,\n              value\n            } = _ref;\n            if (done) return;\n            parser.parse(value);\n            writer.write(value);\n            return reader.read().then(process);\n          });\n          const jsonData = await new Response(readable).json();\n          console.log(jsonData);\n          return prompt === 'test' ? true : jsonData.choices[0].message.content;\n        } else {\n          throw new Error(`Error: ${response.status} ${response.statusText}`);\n        }\n      } catch (error) {\n        console.error(error);\n        return false;\n      }\n    };\n    this.callModel = async (prompt, model) => {\n      if (model === 'gpt-3.5-turbo' || model === 'gpt-4') {\n        return await this.callGPT(prompt, model);\n      } else {\n        return await this.callEngines(prompt, model);\n      }\n    };\n    makeAutoObservable(this);\n  }\n}\nexport default ApiStore;","map":{"version":3,"names":["makeAutoObservable","history","setToken","getToken","removeToken","openai","tokenCounter","createParser","ApiStore","constructor","_this","apiKey","selectedModel","localStorage","getItem","setApiKey","console","log","getApiKey","removeApiKey","push","setSelectedModel","model","setItem","getSelectedModel","callEngines","prompt","arguments","length","undefined","maxTokens","response","fetch","method","headers","body","JSON","stringify","max_tokens","status","data","json","choices","text","Error","statusText","error","callGPT","messages","role","content","temperature","stream","textOutput","onParse","event","type","controller","close","parser","readable","writable","TransformStream","writer","getWriter","reader","read","then","process","_ref","done","value","parse","write","jsonData","Response","message","callModel"],"sources":["C:/Users/94272/Desktop/Job/my-personal_website/beattather/src/store/api.Store.js"],"sourcesContent":["import { makeAutoObservable } from 'mobx';\r\nimport { history, setToken, getToken, removeToken } from '@/utils';\r\nimport * as openai from 'openai'; // 导入openai库\r\nimport { tokenCounter } from '../utils';\r\nimport { createParser } from './openai_stream_parser'; // 导入事件流解析器\r\n\r\nclass ApiStore {\r\n  apiKey = getToken() || '';\r\n  selectedModel = localStorage.getItem('selectedModel') || 'gpt-3.5-turbo';\r\n\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  setApiKey = (apiKey) => {\r\n    console.log(apiKey);\r\n    this.apiKey = apiKey;\r\n    setToken(apiKey);\r\n  };\r\n\r\n  getApiKey = () => {\r\n    return this.apiKey;\r\n  };\r\n\r\n  removeApiKey = () => {\r\n    this.apiKey = '';\r\n    removeToken();\r\n    history.push('/login');\r\n  };\r\n\r\n  setSelectedModel = (model) => {\r\n    this.selectedModel = model;\r\n    localStorage.setItem('selectedModel', model);\r\n  };\r\n\r\n  getSelectedModel = () => {\r\n    return this.selectedModel;\r\n  };\r\n\r\n  callEngines = async ( prompt = \"test\", model = 'text-davinci-003') => {\r\n    let maxTokens = prompt !== 'test' ? 3700 - tokenCounter(prompt) : 1;\r\n    try {\r\n      const response = await fetch(`https://api.openai.com/v1/engines/${model}/completions`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${this.apiKey}`,\r\n        },\r\n        body: JSON.stringify({\r\n          prompt: prompt,\r\n          max_tokens: maxTokens,\r\n        }),\r\n  \r\n      });\r\n  \r\n      if (response.status === 200) {\r\n        const data = await response.json();\r\n        // 返回测试用例结果或实际完成内容\r\n        return prompt === 'test' ? true : data.choices[0].text;\r\n      } else {\r\n        throw new Error(`Error: ${response.status} ${response.statusText}`);\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n\r\n  callGPT = async (prompt = 'test', model = \"gpt-4\") => {\r\n    try {\r\n      let maxTokens;\r\n      if (prompt === 'test') {\r\n        maxTokens = 5;\r\n      } else if (model === \"gpt-4\") {\r\n        maxTokens = 7700 - tokenCounter(prompt);\r\n      } else {\r\n        maxTokens = 3700 - tokenCounter(prompt);\r\n      }\r\n  \r\n      const response = await fetch(`https://api.openai.com/v1/chat/completions`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${this.apiKey}`,\r\n        },\r\n        body: JSON.stringify({\r\n          model: model,\r\n          messages: [{ role: \"user\", content: prompt }],\r\n          max_tokens: maxTokens,\r\n          temperature: 0.5,\r\n          stream: true\r\n        }),\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        let textOutput = '';\r\n\r\n        const onParse = (event) => {\r\n          if (event.type === 'end_of_text') {\r\n            controller.close();\r\n          } else if (event.type === 'text') {\r\n            textOutput += event.data;\r\n          }\r\n        };\r\n\r\n        const parser = createParser(onParse);\r\n\r\n        const { readable, writable } = new TransformStream();\r\n        const writer = writable.getWriter();\r\n\r\n        reader.read().then(async function process({ done, value }) {\r\n          if (done) return;\r\n          parser.parse(value);\r\n          writer.write(value);\r\n          return reader.read().then(process);\r\n        });\r\n\r\n        const jsonData = await new Response(readable).json();\r\n        console.log(jsonData);\r\n\r\n        return prompt === 'test' ? true : jsonData.choices[0].message.content;\r\n      } else {\r\n        throw new Error(`Error: ${response.status} ${response.statusText}`);\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n\r\n  callModel = async (prompt , model ) => {\r\n    if (model === 'gpt-3.5-turbo' || model === 'gpt-4') {\r\n      return await this.callGPT(prompt, model);\r\n    } else {\r\n      return await this.callEngines(prompt, model);\r\n    }\r\n  };\r\n}\r\n\r\nexport default ApiStore;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}